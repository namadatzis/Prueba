{"ast":null,"code":"'use strict';\n\n/**\n * Expose compositor.\n */\nmodule.exports = compose;\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose(middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!');\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!');\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1;\n    return dispatch(0);\n    function dispatch(i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n      index = i;\n      let fn = middleware[i];\n      if (i === middleware.length) fn = next;\n      if (!fn) return Promise.resolve();\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n  };\n}","map":{"version":3,"names":["module","exports","compose","middleware","Array","isArray","TypeError","fn","context","next","index","dispatch","i","Promise","reject","Error","length","resolve","bind","err"],"sources":["/Users/namadatzis/Documents/Proyecto Web/nomad/Nomad/node_modules/koa-compose/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,CAAEC,UAAU,EAAE;EAC5B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE,MAAM,IAAIG,SAAS,CAAC,oCAAoC,CAAC;EACzF,KAAK,MAAMC,EAAE,IAAIJ,UAAU,EAAE;IAC3B,IAAI,OAAOI,EAAE,KAAK,UAAU,EAAE,MAAM,IAAID,SAAS,CAAC,2CAA2C,CAAC;EAChG;;EAEA;AACF;AACA;AACA;AACA;;EAEE,OAAO,UAAUE,OAAO,EAAEC,IAAI,EAAE;IAC9B;IACA,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd,OAAOC,QAAQ,CAAC,CAAC,CAAC;IAClB,SAASA,QAAQ,CAAEC,CAAC,EAAE;MACpB,IAAIA,CAAC,IAAIF,KAAK,EAAE,OAAOG,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,8BAA8B,CAAC,CAAC;MAChFL,KAAK,GAAGE,CAAC;MACT,IAAIL,EAAE,GAAGJ,UAAU,CAACS,CAAC,CAAC;MACtB,IAAIA,CAAC,KAAKT,UAAU,CAACa,MAAM,EAAET,EAAE,GAAGE,IAAI;MACtC,IAAI,CAACF,EAAE,EAAE,OAAOM,OAAO,CAACI,OAAO,EAAE;MACjC,IAAI;QACF,OAAOJ,OAAO,CAACI,OAAO,CAACV,EAAE,CAACC,OAAO,EAAEG,QAAQ,CAACO,IAAI,CAAC,IAAI,EAAEN,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACjE,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZ,OAAON,OAAO,CAACC,MAAM,CAACK,GAAG,CAAC;MAC5B;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}