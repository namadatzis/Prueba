{"ast":null,"code":"'use strict';\n\n/**\n * Module dependencies.\n */\nconst URL = require('url').URL;\nconst net = require('net');\nconst accepts = require('accepts');\nconst contentType = require('content-type');\nconst stringify = require('url').format;\nconst parse = require('parseurl');\nconst qs = require('querystring');\nconst typeis = require('type-is');\nconst fresh = require('fresh');\nconst only = require('only');\nconst util = require('util');\nconst IP = Symbol('context#ip');\n\n/**\n * Prototype.\n */\n\nmodule.exports = {\n  /**\n   * Return request header.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get header() {\n    return this.req.headers;\n  },\n  /**\n   * Set request header.\n   *\n   * @api public\n   */\n\n  set header(val) {\n    this.req.headers = val;\n  },\n  /**\n   * Return request header, alias as request.header\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get headers() {\n    return this.req.headers;\n  },\n  /**\n   * Set request header, alias as request.header\n   *\n   * @api public\n   */\n\n  set headers(val) {\n    this.req.headers = val;\n  },\n  /**\n   * Get request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get url() {\n    return this.req.url;\n  },\n  /**\n   * Set request URL.\n   *\n   * @api public\n   */\n\n  set url(val) {\n    this.req.url = val;\n  },\n  /**\n   * Get origin of URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get origin() {\n    return `${this.protocol}://${this.host}`;\n  },\n  /**\n   * Get full request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get href() {\n    // support: `GET http://example.com/foo`\n    if (/^https?:\\/\\//i.test(this.originalUrl)) return this.originalUrl;\n    return this.origin + this.originalUrl;\n  },\n  /**\n   * Get request method.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get method() {\n    return this.req.method;\n  },\n  /**\n   * Set request method.\n   *\n   * @param {String} val\n   * @api public\n   */\n\n  set method(val) {\n    this.req.method = val;\n  },\n  /**\n   * Get request pathname.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get path() {\n    return parse(this.req).pathname;\n  },\n  /**\n   * Set pathname, retaining the query string when present.\n   *\n   * @param {String} path\n   * @api public\n   */\n\n  set path(path) {\n    const url = parse(this.req);\n    if (url.pathname === path) return;\n    url.pathname = path;\n    url.path = null;\n    this.url = stringify(url);\n  },\n  /**\n   * Get parsed query string.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get query() {\n    const str = this.querystring;\n    const c = this._querycache = this._querycache || {};\n    return c[str] || (c[str] = qs.parse(str));\n  },\n  /**\n   * Set query string as an object.\n   *\n   * @param {Object} obj\n   * @api public\n   */\n\n  set query(obj) {\n    this.querystring = qs.stringify(obj);\n  },\n  /**\n   * Get query string.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get querystring() {\n    if (!this.req) return '';\n    return parse(this.req).query || '';\n  },\n  /**\n   * Set query string.\n   *\n   * @param {String} str\n   * @api public\n   */\n\n  set querystring(str) {\n    const url = parse(this.req);\n    if (url.search === `?${str}`) return;\n    url.search = str;\n    url.path = null;\n    this.url = stringify(url);\n  },\n  /**\n   * Get the search string. Same as the query string\n   * except it includes the leading ?.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get search() {\n    if (!this.querystring) return '';\n    return `?${this.querystring}`;\n  },\n  /**\n   * Set the search string. Same as\n   * request.querystring= but included for ubiquity.\n   *\n   * @param {String} str\n   * @api public\n   */\n\n  set search(str) {\n    this.querystring = str;\n  },\n  /**\n   * Parse the \"Host\" header field host\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname:port\n   * @api public\n   */\n\n  get host() {\n    const proxy = this.app.proxy;\n    let host = proxy && this.get('X-Forwarded-Host');\n    if (!host) {\n      if (this.req.httpVersionMajor >= 2) host = this.get(':authority');\n      if (!host) host = this.get('Host');\n    }\n    if (!host) return '';\n    return host.split(/\\s*,\\s*/, 1)[0];\n  },\n  /**\n   * Parse the \"Host\" header field hostname\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname\n   * @api public\n   */\n\n  get hostname() {\n    const host = this.host;\n    if (!host) return '';\n    if ('[' === host[0]) return this.URL.hostname || ''; // IPv6\n    return host.split(':', 1)[0];\n  },\n  /**\n   * Get WHATWG parsed URL.\n   * Lazily memoized.\n   *\n   * @return {URL|Object}\n   * @api public\n   */\n\n  get URL() {\n    /* istanbul ignore else */\n    if (!this.memoizedURL) {\n      const originalUrl = this.originalUrl || ''; // avoid undefined in template string\n      try {\n        this.memoizedURL = new URL(`${this.origin}${originalUrl}`);\n      } catch (err) {\n        this.memoizedURL = Object.create(null);\n      }\n    }\n    return this.memoizedURL;\n  },\n  /**\n   * Check if the request is fresh, aka\n   * Last-Modified and/or the ETag\n   * still match.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get fresh() {\n    const method = this.method;\n    const s = this.ctx.status;\n\n    // GET or HEAD for weak freshness validation only\n    if ('GET' !== method && 'HEAD' !== method) return false;\n\n    // 2xx or 304 as per rfc2616 14.26\n    if (s >= 200 && s < 300 || 304 === s) {\n      return fresh(this.header, this.response.header);\n    }\n    return false;\n  },\n  /**\n   * Check if the request is stale, aka\n   * \"Last-Modified\" and / or the \"ETag\" for the\n   * resource has changed.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get stale() {\n    return !this.fresh;\n  },\n  /**\n   * Check if the request is idempotent.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get idempotent() {\n    const methods = ['GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'];\n    return !!~methods.indexOf(this.method);\n  },\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n\n  get socket() {\n    return this.req.socket;\n  },\n  /**\n   * Get the charset when present or undefined.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get charset() {\n    try {\n      const {\n        parameters\n      } = contentType.parse(this.req);\n      return parameters.charset || '';\n    } catch (e) {\n      return '';\n    }\n  },\n  /**\n   * Return parsed Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    const len = this.get('Content-Length');\n    if (len === '') return;\n    return ~~len;\n  },\n  /**\n   * Return the protocol string \"http\" or \"https\"\n   * when requested with TLS. When the proxy setting\n   * is enabled the \"X-Forwarded-Proto\" header\n   * field will be trusted. If you're running behind\n   * a reverse proxy that supplies https for you this\n   * may be enabled.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get protocol() {\n    if (this.socket.encrypted) return 'https';\n    if (!this.app.proxy) return 'http';\n    const proto = this.get('X-Forwarded-Proto');\n    return proto ? proto.split(/\\s*,\\s*/, 1)[0] : 'http';\n  },\n  /**\n   * Shorthand for:\n   *\n   *    this.protocol == 'https'\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get secure() {\n    return 'https' === this.protocol;\n  },\n  /**\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list.\n   *\n   * For example if the value was \"client, proxy1, proxy2\"\n   * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n   * where \"proxy2\" is the furthest down-stream.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n  get ips() {\n    const proxy = this.app.proxy;\n    const val = this.get(this.app.proxyIpHeader);\n    let ips = proxy && val ? val.split(/\\s*,\\s*/) : [];\n    if (this.app.maxIpsCount > 0) {\n      ips = ips.slice(-this.app.maxIpsCount);\n    }\n    return ips;\n  },\n  /**\n   * Return request's remote address\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list and return the first one\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get ip() {\n    if (!this[IP]) {\n      this[IP] = this.ips[0] || this.socket.remoteAddress || '';\n    }\n    return this[IP];\n  },\n  set ip(_ip) {\n    this[IP] = _ip;\n  },\n  /**\n   * Return subdomains as an array.\n   *\n   * Subdomains are the dot-separated parts of the host before the main domain\n   * of the app. By default, the domain of the app is assumed to be the last two\n   * parts of the host. This can be changed by setting `app.subdomainOffset`.\n   *\n   * For example, if the domain is \"tobi.ferrets.example.com\":\n   * If `app.subdomainOffset` is not set, this.subdomains is\n   * `[\"ferrets\", \"tobi\"]`.\n   * If `app.subdomainOffset` is 3, this.subdomains is `[\"tobi\"]`.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n  get subdomains() {\n    const offset = this.app.subdomainOffset;\n    const hostname = this.hostname;\n    if (net.isIP(hostname)) return [];\n    return hostname.split('.').reverse().slice(offset);\n  },\n  /**\n   * Get accept object.\n   * Lazily memoized.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  get accept() {\n    return this._accept || (this._accept = accepts(this.req));\n  },\n  /**\n   * Set accept object.\n   *\n   * @param {Object}\n   * @api private\n   */\n\n  set accept(obj) {\n    this._accept = obj;\n  },\n  /**\n   * Check if the given `type(s)` is acceptable, returning\n   * the best match when true, otherwise `false`, in which\n   * case you should respond with 406 \"Not Acceptable\".\n   *\n   * The `type` value may be a single mime type string\n   * such as \"application/json\", the extension name\n   * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n   * or array is given the _best_ match, if any is returned.\n   *\n   * Examples:\n   *\n   *     // Accept: text/html\n   *     this.accepts('html');\n   *     // => \"html\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('html');\n   *     // => \"html\"\n   *     this.accepts('text/html');\n   *     // => \"text/html\"\n   *     this.accepts('json', 'text');\n   *     // => \"json\"\n   *     this.accepts('application/json');\n   *     // => \"application/json\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('image/png');\n   *     this.accepts('png');\n   *     // => false\n   *\n   *     // Accept: text/*;q=.5, application/json\n   *     this.accepts(['html', 'json']);\n   *     this.accepts('html', 'json');\n   *     // => \"json\"\n   *\n   * @param {String|Array} type(s)...\n   * @return {String|Array|false}\n   * @api public\n   */\n\n  accepts() {\n    return this.accept.types(...arguments);\n  },\n  /**\n   * Return accepted encodings or best fit based on `encodings`.\n   *\n   * Given `Accept-Encoding: gzip, deflate`\n   * an array sorted by quality is returned:\n   *\n   *     ['gzip', 'deflate']\n   *\n   * @param {String|Array} encoding(s)...\n   * @return {String|Array}\n   * @api public\n   */\n\n  acceptsEncodings() {\n    return this.accept.encodings(...arguments);\n  },\n  /**\n   * Return accepted charsets or best fit based on `charsets`.\n   *\n   * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n   * an array sorted by quality is returned:\n   *\n   *     ['utf-8', 'utf-7', 'iso-8859-1']\n   *\n   * @param {String|Array} charset(s)...\n   * @return {String|Array}\n   * @api public\n   */\n\n  acceptsCharsets() {\n    return this.accept.charsets(...arguments);\n  },\n  /**\n   * Return accepted languages or best fit based on `langs`.\n   *\n   * Given `Accept-Language: en;q=0.8, es, pt`\n   * an array sorted by quality is returned:\n   *\n   *     ['es', 'pt', 'en']\n   *\n   * @param {String|Array} lang(s)...\n   * @return {Array|String}\n   * @api public\n   */\n\n  acceptsLanguages() {\n    return this.accept.languages(...arguments);\n  },\n  /**\n   * Check if the incoming request contains the \"Content-Type\"\n   * header field and if it contains any of the given mime `type`s.\n   * If there is no request body, `null` is returned.\n   * If there is no content type, `false` is returned.\n   * Otherwise, it returns the first `type` that matches.\n   *\n   * Examples:\n   *\n   *     // With Content-Type: text/html; charset=utf-8\n   *     this.is('html'); // => 'html'\n   *     this.is('text/html'); // => 'text/html'\n   *     this.is('text/*', 'application/json'); // => 'text/html'\n   *\n   *     // When Content-Type is application/json\n   *     this.is('json', 'urlencoded'); // => 'json'\n   *     this.is('application/json'); // => 'application/json'\n   *     this.is('html', 'application/*'); // => 'application/json'\n   *\n   *     this.is('html'); // => false\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false|null}\n   * @api public\n   */\n\n  is(type) {\n    for (var _len = arguments.length, types = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      types[_key - 1] = arguments[_key];\n    }\n    return typeis(this.req, type, ...types);\n  },\n  /**\n   * Return the request mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';')[0];\n  },\n  /**\n   * Return request header.\n   *\n   * The `Referrer` header field is special-cased,\n   * both `Referrer` and `Referer` are interchangeable.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('Something');\n   *     // => ''\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n\n  get(field) {\n    const req = this.req;\n    switch (field = field.toLowerCase()) {\n      case 'referer':\n      case 'referrer':\n        return req.headers.referrer || req.headers.referer || '';\n      default:\n        return req.headers[field] || '';\n    }\n  },\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  inspect() {\n    if (!this.req) return;\n    return this.toJSON();\n  },\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    return only(this, ['method', 'url', 'header']);\n  }\n};\n\n/**\n * Custom inspection implementation for newer Node.js versions.\n *\n * @return {Object}\n * @api public\n */\n\n/* istanbul ignore else */\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}","map":{"version":3,"names":["URL","require","net","accepts","contentType","stringify","format","parse","qs","typeis","fresh","only","util","IP","Symbol","module","exports","header","req","headers","val","url","origin","protocol","host","href","test","originalUrl","method","path","pathname","query","str","querystring","c","_querycache","obj","search","proxy","app","get","httpVersionMajor","split","hostname","memoizedURL","err","Object","create","s","ctx","status","response","stale","idempotent","methods","indexOf","socket","charset","parameters","e","length","len","encrypted","proto","secure","ips","proxyIpHeader","maxIpsCount","slice","ip","remoteAddress","_ip","subdomains","offset","subdomainOffset","isIP","reverse","accept","_accept","types","acceptsEncodings","encodings","acceptsCharsets","charsets","acceptsLanguages","languages","is","type","field","toLowerCase","referrer","referer","inspect","toJSON","custom"],"sources":["/Users/namadatzis/Documents/Proyecto Web/nomad/Nomad/node_modules/koa/lib/request.js"],"sourcesContent":["\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst URL = require('url').URL;\nconst net = require('net');\nconst accepts = require('accepts');\nconst contentType = require('content-type');\nconst stringify = require('url').format;\nconst parse = require('parseurl');\nconst qs = require('querystring');\nconst typeis = require('type-is');\nconst fresh = require('fresh');\nconst only = require('only');\nconst util = require('util');\n\nconst IP = Symbol('context#ip');\n\n/**\n * Prototype.\n */\n\nmodule.exports = {\n\n  /**\n   * Return request header.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get header() {\n    return this.req.headers;\n  },\n\n  /**\n   * Set request header.\n   *\n   * @api public\n   */\n\n  set header(val) {\n    this.req.headers = val;\n  },\n\n  /**\n   * Return request header, alias as request.header\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get headers() {\n    return this.req.headers;\n  },\n\n  /**\n   * Set request header, alias as request.header\n   *\n   * @api public\n   */\n\n  set headers(val) {\n    this.req.headers = val;\n  },\n\n  /**\n   * Get request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get url() {\n    return this.req.url;\n  },\n\n  /**\n   * Set request URL.\n   *\n   * @api public\n   */\n\n  set url(val) {\n    this.req.url = val;\n  },\n\n  /**\n   * Get origin of URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get origin() {\n    return `${this.protocol}://${this.host}`;\n  },\n\n  /**\n   * Get full request URL.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get href() {\n    // support: `GET http://example.com/foo`\n    if (/^https?:\\/\\//i.test(this.originalUrl)) return this.originalUrl;\n    return this.origin + this.originalUrl;\n  },\n\n  /**\n   * Get request method.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get method() {\n    return this.req.method;\n  },\n\n  /**\n   * Set request method.\n   *\n   * @param {String} val\n   * @api public\n   */\n\n  set method(val) {\n    this.req.method = val;\n  },\n\n  /**\n   * Get request pathname.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get path() {\n    return parse(this.req).pathname;\n  },\n\n  /**\n   * Set pathname, retaining the query string when present.\n   *\n   * @param {String} path\n   * @api public\n   */\n\n  set path(path) {\n    const url = parse(this.req);\n    if (url.pathname === path) return;\n\n    url.pathname = path;\n    url.path = null;\n\n    this.url = stringify(url);\n  },\n\n  /**\n   * Get parsed query string.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  get query() {\n    const str = this.querystring;\n    const c = this._querycache = this._querycache || {};\n    return c[str] || (c[str] = qs.parse(str));\n  },\n\n  /**\n   * Set query string as an object.\n   *\n   * @param {Object} obj\n   * @api public\n   */\n\n  set query(obj) {\n    this.querystring = qs.stringify(obj);\n  },\n\n  /**\n   * Get query string.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get querystring() {\n    if (!this.req) return '';\n    return parse(this.req).query || '';\n  },\n\n  /**\n   * Set query string.\n   *\n   * @param {String} str\n   * @api public\n   */\n\n  set querystring(str) {\n    const url = parse(this.req);\n    if (url.search === `?${str}`) return;\n\n    url.search = str;\n    url.path = null;\n\n    this.url = stringify(url);\n  },\n\n  /**\n   * Get the search string. Same as the query string\n   * except it includes the leading ?.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get search() {\n    if (!this.querystring) return '';\n    return `?${this.querystring}`;\n  },\n\n  /**\n   * Set the search string. Same as\n   * request.querystring= but included for ubiquity.\n   *\n   * @param {String} str\n   * @api public\n   */\n\n  set search(str) {\n    this.querystring = str;\n  },\n\n  /**\n   * Parse the \"Host\" header field host\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname:port\n   * @api public\n   */\n\n  get host() {\n    const proxy = this.app.proxy;\n    let host = proxy && this.get('X-Forwarded-Host');\n    if (!host) {\n      if (this.req.httpVersionMajor >= 2) host = this.get(':authority');\n      if (!host) host = this.get('Host');\n    }\n    if (!host) return '';\n    return host.split(/\\s*,\\s*/, 1)[0];\n  },\n\n  /**\n   * Parse the \"Host\" header field hostname\n   * and support X-Forwarded-Host when a\n   * proxy is enabled.\n   *\n   * @return {String} hostname\n   * @api public\n   */\n\n  get hostname() {\n    const host = this.host;\n    if (!host) return '';\n    if ('[' === host[0]) return this.URL.hostname || ''; // IPv6\n    return host.split(':', 1)[0];\n  },\n\n  /**\n   * Get WHATWG parsed URL.\n   * Lazily memoized.\n   *\n   * @return {URL|Object}\n   * @api public\n   */\n\n  get URL() {\n    /* istanbul ignore else */\n    if (!this.memoizedURL) {\n      const originalUrl = this.originalUrl || ''; // avoid undefined in template string\n      try {\n        this.memoizedURL = new URL(`${this.origin}${originalUrl}`);\n      } catch (err) {\n        this.memoizedURL = Object.create(null);\n      }\n    }\n    return this.memoizedURL;\n  },\n\n  /**\n   * Check if the request is fresh, aka\n   * Last-Modified and/or the ETag\n   * still match.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get fresh() {\n    const method = this.method;\n    const s = this.ctx.status;\n\n    // GET or HEAD for weak freshness validation only\n    if ('GET' !== method && 'HEAD' !== method) return false;\n\n    // 2xx or 304 as per rfc2616 14.26\n    if ((s >= 200 && s < 300) || 304 === s) {\n      return fresh(this.header, this.response.header);\n    }\n\n    return false;\n  },\n\n  /**\n   * Check if the request is stale, aka\n   * \"Last-Modified\" and / or the \"ETag\" for the\n   * resource has changed.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get stale() {\n    return !this.fresh;\n  },\n\n  /**\n   * Check if the request is idempotent.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get idempotent() {\n    const methods = ['GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'];\n    return !!~methods.indexOf(this.method);\n  },\n\n  /**\n   * Return the request socket.\n   *\n   * @return {Connection}\n   * @api public\n   */\n\n  get socket() {\n    return this.req.socket;\n  },\n\n  /**\n   * Get the charset when present or undefined.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get charset() {\n    try {\n      const { parameters } = contentType.parse(this.req);\n      return parameters.charset || '';\n    } catch (e) {\n      return '';\n    }\n  },\n\n  /**\n   * Return parsed Content-Length when present.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get length() {\n    const len = this.get('Content-Length');\n    if (len === '') return;\n    return ~~len;\n  },\n\n  /**\n   * Return the protocol string \"http\" or \"https\"\n   * when requested with TLS. When the proxy setting\n   * is enabled the \"X-Forwarded-Proto\" header\n   * field will be trusted. If you're running behind\n   * a reverse proxy that supplies https for you this\n   * may be enabled.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get protocol() {\n    if (this.socket.encrypted) return 'https';\n    if (!this.app.proxy) return 'http';\n    const proto = this.get('X-Forwarded-Proto');\n    return proto ? proto.split(/\\s*,\\s*/, 1)[0] : 'http';\n  },\n\n  /**\n   * Shorthand for:\n   *\n   *    this.protocol == 'https'\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  get secure() {\n    return 'https' === this.protocol;\n  },\n\n  /**\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list.\n   *\n   * For example if the value was \"client, proxy1, proxy2\"\n   * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n   * where \"proxy2\" is the furthest down-stream.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n  get ips() {\n    const proxy = this.app.proxy;\n    const val = this.get(this.app.proxyIpHeader);\n    let ips = proxy && val\n      ? val.split(/\\s*,\\s*/)\n      : [];\n    if (this.app.maxIpsCount > 0) {\n      ips = ips.slice(-this.app.maxIpsCount);\n    }\n    return ips;\n  },\n\n  /**\n   * Return request's remote address\n   * When `app.proxy` is `true`, parse\n   * the \"X-Forwarded-For\" ip address list and return the first one\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get ip() {\n    if (!this[IP]) {\n      this[IP] = this.ips[0] || this.socket.remoteAddress || '';\n    }\n    return this[IP];\n  },\n\n  set ip(_ip) {\n    this[IP] = _ip;\n  },\n\n  /**\n   * Return subdomains as an array.\n   *\n   * Subdomains are the dot-separated parts of the host before the main domain\n   * of the app. By default, the domain of the app is assumed to be the last two\n   * parts of the host. This can be changed by setting `app.subdomainOffset`.\n   *\n   * For example, if the domain is \"tobi.ferrets.example.com\":\n   * If `app.subdomainOffset` is not set, this.subdomains is\n   * `[\"ferrets\", \"tobi\"]`.\n   * If `app.subdomainOffset` is 3, this.subdomains is `[\"tobi\"]`.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n  get subdomains() {\n    const offset = this.app.subdomainOffset;\n    const hostname = this.hostname;\n    if (net.isIP(hostname)) return [];\n    return hostname\n      .split('.')\n      .reverse()\n      .slice(offset);\n  },\n\n  /**\n   * Get accept object.\n   * Lazily memoized.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  get accept() {\n    return this._accept || (this._accept = accepts(this.req));\n  },\n\n  /**\n   * Set accept object.\n   *\n   * @param {Object}\n   * @api private\n   */\n\n  set accept(obj) {\n    this._accept = obj;\n  },\n\n  /**\n   * Check if the given `type(s)` is acceptable, returning\n   * the best match when true, otherwise `false`, in which\n   * case you should respond with 406 \"Not Acceptable\".\n   *\n   * The `type` value may be a single mime type string\n   * such as \"application/json\", the extension name\n   * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n   * or array is given the _best_ match, if any is returned.\n   *\n   * Examples:\n   *\n   *     // Accept: text/html\n   *     this.accepts('html');\n   *     // => \"html\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('html');\n   *     // => \"html\"\n   *     this.accepts('text/html');\n   *     // => \"text/html\"\n   *     this.accepts('json', 'text');\n   *     // => \"json\"\n   *     this.accepts('application/json');\n   *     // => \"application/json\"\n   *\n   *     // Accept: text/*, application/json\n   *     this.accepts('image/png');\n   *     this.accepts('png');\n   *     // => false\n   *\n   *     // Accept: text/*;q=.5, application/json\n   *     this.accepts(['html', 'json']);\n   *     this.accepts('html', 'json');\n   *     // => \"json\"\n   *\n   * @param {String|Array} type(s)...\n   * @return {String|Array|false}\n   * @api public\n   */\n\n  accepts(...args) {\n    return this.accept.types(...args);\n  },\n\n  /**\n   * Return accepted encodings or best fit based on `encodings`.\n   *\n   * Given `Accept-Encoding: gzip, deflate`\n   * an array sorted by quality is returned:\n   *\n   *     ['gzip', 'deflate']\n   *\n   * @param {String|Array} encoding(s)...\n   * @return {String|Array}\n   * @api public\n   */\n\n  acceptsEncodings(...args) {\n    return this.accept.encodings(...args);\n  },\n\n  /**\n   * Return accepted charsets or best fit based on `charsets`.\n   *\n   * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n   * an array sorted by quality is returned:\n   *\n   *     ['utf-8', 'utf-7', 'iso-8859-1']\n   *\n   * @param {String|Array} charset(s)...\n   * @return {String|Array}\n   * @api public\n   */\n\n  acceptsCharsets(...args) {\n    return this.accept.charsets(...args);\n  },\n\n  /**\n   * Return accepted languages or best fit based on `langs`.\n   *\n   * Given `Accept-Language: en;q=0.8, es, pt`\n   * an array sorted by quality is returned:\n   *\n   *     ['es', 'pt', 'en']\n   *\n   * @param {String|Array} lang(s)...\n   * @return {Array|String}\n   * @api public\n   */\n\n  acceptsLanguages(...args) {\n    return this.accept.languages(...args);\n  },\n\n  /**\n   * Check if the incoming request contains the \"Content-Type\"\n   * header field and if it contains any of the given mime `type`s.\n   * If there is no request body, `null` is returned.\n   * If there is no content type, `false` is returned.\n   * Otherwise, it returns the first `type` that matches.\n   *\n   * Examples:\n   *\n   *     // With Content-Type: text/html; charset=utf-8\n   *     this.is('html'); // => 'html'\n   *     this.is('text/html'); // => 'text/html'\n   *     this.is('text/*', 'application/json'); // => 'text/html'\n   *\n   *     // When Content-Type is application/json\n   *     this.is('json', 'urlencoded'); // => 'json'\n   *     this.is('application/json'); // => 'application/json'\n   *     this.is('html', 'application/*'); // => 'application/json'\n   *\n   *     this.is('html'); // => false\n   *\n   * @param {String|String[]} [type]\n   * @param {String[]} [types]\n   * @return {String|false|null}\n   * @api public\n   */\n\n  is(type, ...types) {\n    return typeis(this.req, type, ...types);\n  },\n\n  /**\n   * Return the request mime type void of\n   * parameters such as \"charset\".\n   *\n   * @return {String}\n   * @api public\n   */\n\n  get type() {\n    const type = this.get('Content-Type');\n    if (!type) return '';\n    return type.split(';')[0];\n  },\n\n  /**\n   * Return request header.\n   *\n   * The `Referrer` header field is special-cased,\n   * both `Referrer` and `Referer` are interchangeable.\n   *\n   * Examples:\n   *\n   *     this.get('Content-Type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('content-type');\n   *     // => \"text/plain\"\n   *\n   *     this.get('Something');\n   *     // => ''\n   *\n   * @param {String} field\n   * @return {String}\n   * @api public\n   */\n\n  get(field) {\n    const req = this.req;\n    switch (field = field.toLowerCase()) {\n      case 'referer':\n      case 'referrer':\n        return req.headers.referrer || req.headers.referer || '';\n      default:\n        return req.headers[field] || '';\n    }\n  },\n\n  /**\n   * Inspect implementation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  inspect() {\n    if (!this.req) return;\n    return this.toJSON();\n  },\n\n  /**\n   * Return JSON representation.\n   *\n   * @return {Object}\n   * @api public\n   */\n\n  toJSON() {\n    return only(this, [\n      'method',\n      'url',\n      'header'\n    ]);\n  }\n};\n\n/**\n * Custom inspection implementation for newer Node.js versions.\n *\n * @return {Object}\n * @api public\n */\n\n/* istanbul ignore else */\nif (util.inspect.custom) {\n  module.exports[util.inspect.custom] = module.exports.inspect;\n}\n"],"mappings":"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,eAAe;IACvC,MAAM/B,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAIzC,GAAG,CAACyE,IAAI,CAAChC,QAAQ,CAAC,EAAE,OAAO,EAAE;IACjC,OAAOA,QAAQ,CACZD,KAAK,CAAC,GAAG,CAAC,CACVkC,OAAO,EAAE,CACTR,KAAK,CAACK,MAAM,CAAC;EAClB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,IAAII,MAAM,GAAG;IACX,OAAO,IAAI,CAACC,OAAO,KAAK,IAAI,CAACA,OAAO,GAAG3E,OAAO,CAAC,IAAI,CAACe,GAAG,CAAC,CAAC;EAC3D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;;EAEE,IAAI2D,MAAM,CAACzC,GAAG,EAAE;IACd,IAAI,CAAC0C,OAAO,GAAG1C,GAAG;EACpB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEjC,OAAO,GAAU;IACf,OAAO,IAAI,CAAC0E,MAAM,CAACE,KAAK,CAAC,YAAO,CAAC;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEC,gBAAgB,GAAU;IACxB,OAAO,IAAI,CAACH,MAAM,CAACI,SAAS,CAAC,YAAO,CAAC;EACvC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEC,eAAe,GAAU;IACvB,OAAO,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,YAAO,CAAC;EACtC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEC,gBAAgB,GAAU;IACxB,OAAO,IAAI,CAACP,MAAM,CAACQ,SAAS,CAAC,YAAO,CAAC;EACvC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEC,EAAE,CAACC,IAAI,EAAY;IAAA,kCAAPR,KAAK;MAALA,KAAK;IAAA;IACf,OAAOtE,MAAM,CAAC,IAAI,CAACS,GAAG,EAAEqE,IAAI,EAAE,GAAGR,KAAK,CAAC;EACzC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,IAAIQ,IAAI,GAAG;IACT,MAAMA,IAAI,GAAG,IAAI,CAAC/C,GAAG,CAAC,cAAc,CAAC;IACrC,IAAI,CAAC+C,IAAI,EAAE,OAAO,EAAE;IACpB,OAAOA,IAAI,CAAC7C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEF,GAAG,CAACgD,KAAK,EAAE;IACT,MAAMtE,GAAG,GAAG,IAAI,CAACA,GAAG;IACpB,QAAQsE,KAAK,GAAGA,KAAK,CAACC,WAAW,EAAE;MACjC,KAAK,SAAS;MACd,KAAK,UAAU;QACb,OAAOvE,GAAG,CAACC,OAAO,CAACuE,QAAQ,IAAIxE,GAAG,CAACC,OAAO,CAACwE,OAAO,IAAI,EAAE;MAC1D;QACE,OAAOzE,GAAG,CAACC,OAAO,CAACqE,KAAK,CAAC,IAAI,EAAE;IAAC;EAEtC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;;EAEEI,OAAO,GAAG;IACR,IAAI,CAAC,IAAI,CAAC1E,GAAG,EAAE;IACf,OAAO,IAAI,CAAC2E,MAAM,EAAE;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;;EAEEA,MAAM,GAAG;IACP,OAAOlF,IAAI,CAAC,IAAI,EAAE,CAChB,QAAQ,EACR,KAAK,EACL,QAAQ,CACT,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,IAAI,CAACgF,OAAO,CAACE,MAAM,EAAE;EACvB/E,MAAM,CAACC,OAAO,CAACJ,IAAI,CAACgF,OAAO,CAACE,MAAM,CAAC,GAAG/E,MAAM,CAACC,OAAO,CAAC4E,OAAO;AAC9D"},"metadata":{},"sourceType":"script","externalDependencies":[]}